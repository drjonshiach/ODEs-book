Traceback (most recent call last):
  File "C:\Users\Jon\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\Jon\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\nbclient\client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Jon\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\jupyter_core\utils\__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.11_3.11.1776.0_x64__qbz5n2kfra8p0\Lib\asyncio\base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\Jon\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\nbclient\client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "C:\Users\Jon\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\nbclient\client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\Jon\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\nbclient\client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt
plt.rcParams['text.usetex'] = True  # allows use of LaTeX in labels

# IVP solver function
def solveIVP(f, tspan, y0, h, solver):

    # Initialise t and y arrays
    t = np.arange(tspan[0], tspan[1] + h, h)
    y = np.zeros((len(t),len(y0)))
    t[0] = tspan[0]
    y[0,:] = y0

    # Loop through steps and calculate single step solver solution
    for n in range(len(t) - 1):
        y[n+1,:] = solver(f, t[n], y[n,:], h)
              
    return t, y


# Euler method function
def euler(f, t, y, h): 
    return y + h * f(t, y)


# Define ODE function
def f(t, y):
    return np.array([y[1], y[0] + y[1]])


# Define BVP parameters
tspan = [0, 1]  # boundaries of the t domain
bvals = [0, 2]  # boundary values
h = 0.2         # step length
s = [1, 2, 1.5] # guess values

# Calculate the solution to the IVP for the different guess values
t, y1 = solveIVP(f, tspan, [bvals[0], s[0]], h, euler)
t, y2 = solveIVP(f, tspan, [bvals[0], s[1]], h, euler)
t, y3 = solveIVP(f, tspan, [bvals[0], s[2]], h, euler)

# Print table of solutions
print(f"\ns = {y1[0,1]:0.2f}\n")
print("|  $t$  |  $y_1$  |  $y_2$  |")
print("|:-----:|:-------:|:-------:|")
for n in range(len(t)):
    print(f"| {t[n]:5.2f} | {y1[n,0]:7.6f} | {y1[n,1]:7.6f} |")

print(f"\ns = {y2[0,1]:0.2f}\n")
print("|  $t$  |  $y_1$  |  $y_2$  |")
print("|:-----:|:-------:|:-------:|")
for n in range(len(t)):
    print(f"| {t[n]:5.2f} | {y2[n,0]:7.6f} | {y2[n,1]:7.6f} |")

print(f"\ns = {y3[0,1]:0.2f}\n")
print("|  $t$  |  $y_1$  |  $y_2$  |")
print("|:-----:|:-------:|:-------:|")
for n in range(len(t)):
    print(f"| {t[n]:5.2f} | {y2[n,0]:7.6f} | {y2[n,1]:7.6f} |")
        
    
# Plot solution
fig, ax = plt.subplots()
plt.plot(t, y1[:,0], "bo-", label="$s = 1.0$")
plt.plot(t, y2[:,0], "ro-", label="$s = 2.0$")
plt.plot(t, y3[:,0], "go-", label="$s = 1.5$")
plt.plot(tspan, bvals, "ko")
plt.annotate(f"$y(1)={bvals[1]}$", xy=(tspan[1], bvals[1]), xytext=(tspan[1]+0.1, bvals[1]), fontsize=14, arrowprops=dict(arrowstyle='->', shrinkB=5))
plt.annotate(f"$y(1)={y1[-1,0]}$", xy=(tspan[1], y1[-1,0]), xytext=(tspan[1]+0.1, y1[-1,0]), fontsize=14, color="b", arrowprops=dict(arrowstyle='->', shrinkB=5, ec="b"))
plt.annotate(f"$y(1)={y2[-1,0]}$", xy=(tspan[1], y2[-1,0]), xytext=(tspan[1]+0.1, y2[-1,0]), fontsize=14, color="r", arrowprops=dict(arrowstyle='->', shrinkB=5, ec="r"))
plt.annotate(f"$y(1)={y3[-1,0]:0.4f}$", xy=(tspan[1], y3[-1,0]), xytext=(tspan[1]+0.1, y3[-1,0]), fontsize=14, color="g", arrowprops=dict(arrowstyle='->', shrinkB=5, ec="g"))
plt.xlabel("$t$", fontsize=14)
plt.ylabel("$y$", fontsize=14)
plt.legend(fontsize=12)
plt.show()


from myst_nb import glue
glue("shooting_example_plot_1", fig, display=False)
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [1;32mIn[1], line 1[0m
[1;32m----> 1[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
[0;32m      2[0m [38;5;28;01mimport[39;00m [38;5;21;01mmatplotlib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpyplot[39;00m [38;5;28;01mas[39;00m [38;5;21;01mplt[39;00m
[0;32m      3[0m plt[38;5;241m.[39mrcParams[[38;5;124m'[39m[38;5;124mtext.usetex[39m[38;5;124m'[39m] [38;5;241m=[39m [38;5;28;01mTrue[39;00m  [38;5;66;03m# allows use of LaTeX in labels[39;00m

[1;31mModuleNotFoundError[0m: No module named 'numpy'

