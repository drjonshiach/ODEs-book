Traceback (most recent call last):
  File "C:\Users\Jon\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\Jon\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\nbclient\client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Jon\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\jupyter_core\utils\__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.11_3.11.1776.0_x64__qbz5n2kfra8p0\Lib\asyncio\base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\Jon\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\nbclient\client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "C:\Users\Jon\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\nbclient\client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\Jon\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\nbclient\client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import subprocess 

def table_row(string, k, x, r):
    string += f"| {k} |"
    for i in range(len(x)):
        string += f"{x[i]:9.6f} | "
    string += f"{max(abs(r)):0.2e} |\n"

    return string

def gauss_seidel_table(A, b, tol=1e-4):
    n = len(b)
    x = np.zeros(n)
    maxiter = 100
    r = b - np.dot(A, x)
    
    string =  f"| $k$ |"
    for i in range(n):
        string += f" $x_{i+1}$ | "
    string += " max residual |\n"
    string += "|:--:|"
    for i in range(n+1):
        string += ":--:|"
    string += "\n"

    string  = table_row(string, 0, x, r)

    for k in range(1, maxiter):
        for i in range(n):
            sum_ = 0
            for j in range(n):
                if i != j:
                    sum_ += A[i,j] * x[j]
        
            x[i] = (b[i] - sum_) / A[i,i]
            
        r = b - np.dot(A, x)

        if k < 10:
            string  = table_row(string, k, x, r)

        if max(abs(r)) < tol:
            break
    

    string += "| $\\vdots$ |"
    for i in range(n + 1):
        string += " $\\vdots$ | "
    string += " \n"

    string  = table_row(string, k, x, r)

    return string


def gauss_seidel_latex(A, b, tol=1e-4):
    n = len(b)
    x = np.zeros(n)
    maxiter = 100
    ordinal = ["first", "second", "third"]
    string =  "The Gauss-Seidel method for this system is\n\n"
    string += "$$ \\begin{align*}\n"
    for i in range(n):
        string += f"    x_{{{i+1}}}^{{(k+1)}} &= \\frac{{1}}{{{A[i,i]}}} \\left( {b[i]}"
        for j in range(n):
            if i == j:
                continue
            if A[i,j] == 1:
                string += f" - x_{{{j+1}}}"
            elif A[i,j] == -1:
                string += f" + x_{{{j+1}}}"
            elif A[i,j] < 0:
                string += f" + {-A[i,j]} x_{{{j+1}}}"
            elif A[i,j] > 0:
                string += f" - {A[i,j]} x_{{{j+1}}}"
            if j < i and A[i,j] != 0:
                string += "^{{(k+1)}}"
            elif j > i and A[i,j] != 0:
                string += "^{{(k)}}"
        
        if i == n - 1:
            string += " \\right). \n"
        else:
            string += " \\right), \\\ \n"
            
    string += "\\end{align*} $$ \n\n"
    string += "Using starting values of $\\mathbf{x} = \\mathbf{0}$. "
        
    for k in range(2):

        string += f"Calculating the {ordinal[k]} iteration\n\n"
        string += "$$ \\begin{align*}\n"
        
        for i in range(n):
    
            string += rf"    x_{{{i+1}}}^{{({k+1})}} &= \frac{{1}}{{{A[i,i]}}} \left( {b[i]}"

            sum_ = b[i]
            for j in range(n):
                if i != j: 
                    sum_ -= A[i,j] * x[j]
        
                if i == j:
                    continue

                if A[i,j] == 1:
                    if x[j] == 0:
                        string += f" - 0 "
                    elif x[j] > 0:
                        string += f" + {x[j]:0.6} "
                    else:
                        string += f" {x[j]:0.6} "
                elif A[i,j] == -1:
                    if x[j] == 0:
                        string += f" + 0 "
                    elif x[j] > 0:
                        string += f" + {x[j]:0.6} "
                    else:
                        string += f" {x[j]:0.6} "
                elif A[i,j] < 0:
                    if x[j] == 0:
                        string += f" + {-A[i,j]} (0) "
                    else:
                        string += f" + {-A[i,j]}({x[j]:0.6}) "
                elif A[i,j] > 0:
                    if x[j] == 0:
                        string += f" - {A[i,j]} (0) "
                    else:
                        string += f" - {A[i,j]}({x[j]:0.6}) "

            x[i] = sum_ / A[i,i]

            if i == n - 1:
                string += f" \\right) = {x[i]:0.6}. \n"
            else:
                string += f" \\right) = {x[i]:0.6}, \\\ \n"
            
        r = b - np.dot(A, x)   
        

        string += "\\end{align*} $$\n\nCalculate the residual\n\n"
        string += "$$ \\begin{align*} \n"
        string += f"    \\mathbf{{r}}^{{({k+1})}} = \\mathbf{{b}} - A \\mathbf{{x}}^{{(1)}} = \n"
        string += "    \\begin{pmatrix}"
        for i in range(n):
            string += f" {b[i]}"
            if i < n - 1:
                string += " \\\ "
        string += " \\end{pmatrix} - \n"

        string += "    \\begin{pmatrix}"
        for i in range(n):
            for j in range(n):
                string += f" {A[i,j]}"
                if j < n - 1:
                    string += " &"
            if i < n - 1:
                string += " \\\ "
        string += " \\end{pmatrix}\n"
        string += "    \\begin{pmatrix}"
        for i in range(n):
            string += f" {x[i]:0.6}"
            if i < n - 1:
                string += " \\\ "
        string += " \\end{pmatrix} = \n"

        string += "    \\begin{pmatrix}"
        for i in range(n):
            string += f" {r[i]:0.6}"
            if i < n - 1:
                string += " \\\ "
        string += "    \\end{pmatrix}.\n"
        string += "\\end{align*} $$\n\n"
        string += f"Since $\\max(| \\mathbf{{r}}^{{({k+1})}} |) = {max(abs(r)):0.4f} > 10^{{-4}}$ we continue iterating. "
    
    return string
        
# Define linear system
A = np.array([[4, 3, 0], [3, 4, -1], [0, -1, 4]])
b = np.array([-2, -8, 14])

# Solve linear system
string = ""
string += gauss_seidel_latex(A, b)

string += "The Gauss-Seidel method was iterated until $\\max(|\\mathbf{r}|) < 10^{-4}$ and a selection of the iteration values are given in the table below.\n\n"

string += gauss_seidel_table(A, b)

string += "\n:::\n::::"

print(string)
subprocess.run("pbcopy", text=True, input=string)
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [1;32mIn[1], line 1[0m
[1;32m----> 1[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
[0;32m      2[0m [38;5;28;01mimport[39;00m [38;5;21;01msubprocess[39;00m 
[0;32m      4[0m [38;5;28;01mdef[39;00m [38;5;21mtable_row[39m(string, k, x, r):

[1;31mModuleNotFoundError[0m: No module named 'numpy'

